Feature('PMM Add Instance Flags tests').retry(0);

const dbInstances = new DataTable(['serviceName']);

const flags = {
  mysql: {
    name: 'MySQL',
    help: 'help',
    serverUrl: 'server-url=SERVER-URL',
    serverInsecureTls: 'server-insecure-tls',
    debug: 'debug',
    trace: 'trace',
    pmmAgentListenPort: 'pmm-agent-listen-port=7777',
    json: 'json',
    version: 'version',
    socket: 'socket=SOCKET',
    nodeId: 'node-id=NODE-ID',
    pmmAgentId: 'pmm-agent-id=PMM-AGENT-ID',
    username: 'username',
    password: 'password=PASSWORD',
    agentPassword: 'agent-password=AGENT-PASSWORD',
    querySource: 'query-source=slowlog',
    disableQueryExamples: 'disable-queryexamples',
    sizeSlowLogs: 'size-slow-logs=SIZE-SLOW-LOGS',
    disableTableStats: 'disable-tablestats',
    disableTableStatsLimit: 'disable-tablestats-limit=DISABLE-TABLESTATS-LIMIT',
    environment: 'environment=ENVIRONMENT',
    cluster: 'cluster=CLUSTER',
    replicationSet: 'replication-set=REPLICATION-SET',
    customLabels: 'custom-labels=CUSTOM-LABELS',
    skipConnectionCheck: 'skip-connection-check',
    tls: 'tls',
    tlsSkipVerify: 'tls-skip-verify',
    tlsCa: 'tls-ca=TLS-CA',
    tlsCert: 'tls-cert=TLS-CERT',
    tlsKey: 'tls-key=TLS-KEY',
    metricsMode: 'metrics-mode=auto',
    disableCollectors: 'disable-collectors=DISABLE-COLLECTORS',
    host: 'host=HOST',
    port: 'port=PORT',
    // logLevel: 'log-level=warn',
  },
  postgresql: {
    name: 'PostgreSQL',
    help: 'help',
    serverUrl: 'server-url=SERVER-URL',
    serverInsecureTls: 'server-insecure-tls',
    debug: 'debug',
    trace: 'trace',
    pmmAgentListenPort: 'pmm-agent-listen-port=7777',
    json: 'json',
    version: 'version',
    socket: 'socket=SOCKET',
    username: 'username',
    password: 'password=PASSWORD',
    database: 'database=DATABASE',
    agentPassword: 'agent-password=AGENT-PASSWORD',
    nodeId: 'node-id=NODE-ID',
    pmmAgentId: 'pmm-agent-id=PMM-AGENT-ID',
    querySource: 'query-source=pgstatements',
    environment: 'environment=ENVIRONMENT',
    cluster: 'cluster=CLUSTER',
    replicationSet: 'replication-set=REPLICATION-SET',
    customLabels: 'custom-labels=CUSTOM-LABELS',
    skipConnectionCheck: 'skip-connection-check',
    tls: 'tls',
    tlsCaFile: 'tls-ca-file=TLS-CA-FILE',
    tlsCertFile: 'tls-cert-file=TLS-CERT-FILE',
    tlsKeyFile: 'tls-key-file=TLS-KEY-FILE',
    tlsSkipVerify: 'tls-skip-verify',
    disableQueryExamples: 'disable-queryexamples',
    metricsMode: 'metrics-mode=auto',
    disableCollectors: 'disable-collectors=DISABLE-COLLECTORS',
    serviceName: 'service-name=NAME',
    host: 'host=HOST',
    port: 'port=PORT',
    // logLevel: 'log-level=warn',
  },
  mongodb: {
    name: 'MongoDB',
    help: 'help',
    serverUrl: 'server-url=SERVER-URL',
    serverInsecureTls: 'server-insecure-tls',
    debug: 'debug',
    trace: 'trace',
    pmmAgentListenPort: 'pmm-agent-listen-port=7777',
    json: 'json',
    version: 'version',
    nodeId: 'node-id=NODE-ID',
    pmmAgentId: 'pmm-agent-id=PMM-AGENT-ID',
    username: 'username=USERNAME',
    password: 'password=PASSWORD',
    agentPassword: 'agent-password=AGENT-PASSWORD',
    querySource: 'query-source=profiler',
    environment: 'environment=ENVIRONMENT',
    cluster: 'cluster=CLUSTER',
    replicationSet: 'replication-set=REPLICATION-SET',
    customLabels: 'custom-labels=CUSTOM-LABELS',
    skipConnectionCheck: 'skip-connection-check',
    tls: 'tls',
    tlsSkipVerify: 'tls-skip-verify',
    tlsCertificateKeyFile: 'tls-certificate-key-file=TLS-CERTIFICATE-KEY-FILE',
    tlsCertificateKeyFilePassword: 'tls-certificate-key-file-password=TLS-CERTIFICATE-KEY-FILE-PASSWORD',
    tlsCaFile: 'tls-ca-file=TLS-CA-FILE',
    authenticationMechanism: 'authentication-mechanism=AUTHENTICATION-MECHANISM',
    authenticationDatabase: 'authentication-database=AUTHENTICATION-DATABASE',
    metricsMode: 'metrics-mode=auto',
    enableAllCollectors: 'enable-all-collectors',
    disableCollectors: 'disable-collectors=DISABLE-COLLECTORS',
    serviceName: 'service-name=NAME',
    host: 'host=HOST',
    port: 'port=PORT',
    // logLevel: 'log-level=warn',
    socket: 'socket=SOCKET',
    statsCollections: 'stats-collections=STATS-COLLECTIONS',
    maxCollectionsLimit: 'max-collections-limit=-1',
  },
  proxysql: {
    name: 'ProxySQL',
    a: 'help',
    serverUrl: 'server-url=SERVER-URL',
    serverInsecureTls: 'server-insecure-tls',
    debug: 'debug',
    trace: 'trace',
    pmmAgentListenPort: 'pmm-agent-listen-port=7777',
    json: 'json',
    version: 'version',
    socket: 'socket=SOCKET',
    nodeId: 'node-id=NODE-ID',
    pmmAgentId: 'pmm-agent-id=PMM-AGENT-ID',
    username: 'username',
    password: 'password',
    agentPassword: 'agent-password=AGENT-PASSWORD',
    environment: 'environment=ENVIRONMENT',
    cluster: 'cluster=CLUSTER',
    replicationSet: 'replication-set=REPLICATION-SET',
    customLabels: 'custom-labels=CUSTOM-LABELS',
    skipConnectionCheck: 'skip-connection-check',
    tls: 'tls',
    tlsSkipVerify: 'tls-skip-verify',
    metricsMode: 'metrics-mode=auto',
    disableCollectors: 'disable-collectors=DISABLE-COLLECTORS',
    serviceName: 'service-name=NAME',
    host: 'host=HOST',
    port: 'port=PORT',
    // logLevel: 'log-level=warn',
  },
};

dbInstances.add(['mysql']);
dbInstances.add(['postgresql']);
dbInstances.add(['mongodb']);
dbInstances.add(['proxysql']);

Data(dbInstances).Scenario(
  'PMM-T259 PMM-T443 PMM-T959 PMM-T960 Verify pmm-admin add {serviceName} --help @nazarov',
  async ({ I, current }) => {
    const { serviceName } = current;
    const serviceFlags = flags[serviceName];

    for (const flag in serviceFlags) {
      const output = await I.verifyCommand(`pmm-admin add ${serviceName} --help 2>&1 | grep ${serviceFlags[flag]}`);

      I.assertTrue(output.includes(serviceFlags[flag]), `Manual for the "add ${serviceName}" does contain ${flag} flag`);

      // console.log(serviceFlags[flag]);
    }
  },
);
