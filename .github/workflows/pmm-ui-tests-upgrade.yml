---
name: pmm-ui-tests-upgrade

on:
  workflow_call:
    inputs:
      pmm_ui_tests_branch:
        description: 'Target branch for pmm-ui-tests repository'
        default: 'main'
        type: string
        required: true
      pmm_pre_upgrade_flag:
        description: 'Flag to run set of tests before upgrade.'
        type: string
        required: true
      pmm_post_upgrade_flag:
        description: 'Flag to run set of tests after upgrade.'
        type: string
        required: true
      pmm_server_version:
        description: 'Version of the pmm server used for testing'
        default: 'dev-latest'
        type: string
        required: true
      pmm_server_docker_tag:
        description: 'Use when tag different to: "perconalab/pmm-server" is required'
        type: string
      pmm_client_version:
        description: 'Version of the pmm client used for testing'
        default: 'dev-latest'
        type: string
        required: true
      pmm_client_upgrade_version:
        description: 'Version of the pmm client to upgrade to, if left empty, then version based on repository will be selected.'
        default: 'dev-latest'
        type: string
      pmm_clients:
        description: 'Clients for pmm-server'
        default: '--addclient=ps,1'
        type: string
        required: true
      pmm_qa_branch:
        description: 'Branch for the pmm-qa repository.'
        default: 'main'
        type: string
        required: true
      testing_repository:
        description: 'Enable Testing Repository.'
        default: 'no'
        type: string
        required: true
      experimental_repository:
        description: 'Enable Experimental Repository.'
        default: 'no'
        type: string
        required: true
  workflow_dispatch:
    inputs:
      pmm_ui_tests_branch:
        description: 'Target branch for pmm-ui-tests repository'
        default: 'main'
        required: true
      pmm_pre_upgrade_flag:
        description: 'Flag to run set of tests before upgrade.'
        required: true
      pmm_post_upgrade_flag:
        description: 'Flag to run set of tests after upgrade.'
        required: true
      pmm_server_version:
        description: 'Version of the pmm server used for testing'
        default: 'dev-latest'
        required: true
      pmm_client_version:
        description: 'Version of the pmm client used for testing'
        default: 'dev-latest'
        required: true
      pmm_client_upgrade_version:
        description: 'Version of the pmm client to upgrade to, if left empty, then version based on repository will be selected.'
        type: string
      pmm_clients:
        description: 'Clients for pmm-server'
        default: '--addclient=ps,1'
        required: true
      pmm_qa_branch:
        description: 'Branch for the pmm-qa repository.'
        default: 'main'
        required: true
      testing_repository:
        description: 'Enable Testing Repository.'
        default: 'no'
        required: true
      experimental_repository:
        description: 'Enable Experimental Repository.'
        default: 'no'
        required: true

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      SHA: ${{ inputs.sha || 'null' }}
      PMM_BASE_URL: https://127.0.0.1
      ADMIN_PASSWORD: admin

      UI_TESTS_BRANCH: ${{ inputs.pmm_ui_tests_branch }}
      PMM_CLIENTS: ${{ inputs.pmm_clients }}

      PMM_SERVER_VERSION: ${{ inputs.pmm_server_version }}
      PMM_CLIENT_VERSION: ${{ inputs.pmm_client_version }}
      PMM_QA_BRANCH: ${{ inputs.pmm_qa_branch }}

      OKTA_TOKEN: ${{ secrets.OKTA_TOKEN }}
      OAUTH_ISSUER_URL: 'https://id-dev.percona.com/oauth2/aus15pi5rjdtfrcH51d7'
      OAUTH_CLIENT_ID: ${{ secrets.OKTA_OAUTH_CLIENT_ID }}
      OAUTH_CLIENT_SECRET: ${{ secrets.OKTA_OAUTH_CLIENT_SECRET }}
      OAUTH_PMM_CLIENT_ID: ${{ secrets.OKTA_OAUTH_PMM_CLIENT_ID }}
      OAUTH_PMM_CLIENT_SECRET: ${{ secrets.OKTA_OAUTH_PMM_CLIENT_SECRET }}
      OAUTH_DEV_HOST: ${{ secrets.OAUTH_DEV_HOST }}
      OAUTH_SCOPES: percona

      # Variables for E2E tests
      MAILOSAUR_API_KEY: ${{ secrets.MAILOSAUR_API_KEY }}
      MAILOSAUR_UI_TESTS_SERVER_ID: ${{ secrets.MAILOSAUR_UI_TESTS_SERVER_ID }}
      MAILOSAUR_API_TESTS_SERVER_ID: ${{ secrets.MAILOSAUR_API_TESTS_SERVER_ID }}

      SERVICENOW_LOGIN: percona_platform
      SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
      SERVICENOW_DEV_URL: 'https://perconadev.service-now.com/api/x_pellc_percona_pl/platform/settest'

    steps:
      - name: PMM server version ${{ inputs.pmm_server_version }} and UI upgrade tests for flags "${{ inputs.pmm_pre_upgrade_flag }}, ${{ inputs.pmm_post_upgrade_flag }}" and  pmm-ui-tests branch ${{ inputs.pmm_ui_tests_branch }}
        if: ${{ github.event_name == 'workflow_dispatch' && env.SHA != 'null' }}
        uses: percona-platform/github-status-action@v1
        with:
          context: 'pmm2-ui-tests'
          description: 'Tests execution has been started'
          state: 'pending'
          repository: ${{ inputs.repo }}
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          sha: ${{ env.SHA }}

      - name: Install NodeJS v16
        uses: percona-platform/setup-node@v2
        with:
          node-version: 16.14.1

      - name: Checkout UI tests
        uses: percona-platform/checkout@v2
        with:
          ref: ${{ env.UI_TESTS_BRANCH }}
          repository: percona/pmm-ui-tests
          path: ./pmm-ui-tests

      - name: Checkout pmm-qa Repo
        uses: percona-platform/checkout@v2
        with:
          # token: ${{ secrets.ROBOT_TOKEN }}
          repository: percona/pmm-qa
          path: ./pmm-qa
          ref: ${{ env.PMM_QA_BRANCH }}

      - name: Compose PMM-Sever
        if: ${{ inputs.pmm_server_docker_tag == '' }}
        working-directory: pmm-qa/pmm-integration
        run: |
          npm install
          sudo npx ts-node ./integration-setup.ts --ci --setup-docker-pmm-server --rbac --pmm-server-version=${{ env.PMM_SERVER_VERSION }} --pmm-client-version=${{ env.PMM_CLIENT_VERSION }}

      - name: Compose PMM-Sever with docker tag ${{ inputs.pmm_server_docker_tag }}
        if: ${{ inputs.pmm_server_docker_tag != '' }}
        working-directory: pmm-qa/pmm-integration
        run: |
          npm install
          sudo npx ts-node ./integration-setup.ts --ci --setup-docker-pmm-server --rbac --pmm-server-docker-tag=${{ inputs.pmm_server_docker_tag }} --pmm-client-version=${{ env.PMM_CLIENT_VERSION }}          

      - name: Setup Client for PMM-Server
        run: |
          sudo bash ./pmm-qa/pmm-tests/pmm2-client-setup.sh --pmm_server_ip 127.0.0.1 --client_version ${{ env.PMM_CLIENT_VERSION }} --admin_password admin --use_metrics_mode no
          sudo bash ./pmm-qa/pmm-tests/pmm-framework.sh \
            --download \
            ${{ env.PMM_CLIENTS }} \
            --pmm2 \
            --pmm2-server-ip=127.0.0.1
          sleep 30
          sudo pmm-admin list
        shell: bash
      
      - name: Enable Test Repository.
        if: ${{ inputs.testing_repository == 'yes'}}
        run: |
            docker exec pmm-integration-server bash -c "echo exclude=mirror.es.its.nyu.edu | tee -a /etc/yum/pluginconf.d/fastestmirror.conf"
            docker exec pmm-integration-server yum update -y percona-release
            docker exec pmm-integration-server sed -i'' -e 's^/release/^/testing/^' /etc/yum.repos.d/pmm2-server.repo
            docker exec pmm-integration-server percona-release enable percona testing
            docker exec pmm-integration-server yum clean all

            sudo percona-release enable percona testing

      - name: Enable Experimental Repository.
        if: ${{ inputs.experimental_repository == 'yes'}}
        run: |
          set -o errexit
          set -o xtrace
          docker exec pmm-integration-server bash -c "echo exclude=mirror.es.its.nyu.edu | tee -a /etc/yum/pluginconf.d/fastestmirror.conf"
          docker exec pmm-integration-server yum update -y percona-release
          docker exec pmm-integration-server sed -i'' -e 's^/release/^/experimental/^' /etc/yum.repos.d/pmm2-server.repo
          docker exec pmm-integration-server percona-release enable percona experimental
          docker exec pmm-integration-server yum clean all

          sudo percona-release enable percona experimental

      - name: Execute Pre Upgrade UI tests
        id: ui-tests-flagged
        working-directory: pmm-ui-tests
        run: |
          npm install
          npx playwright install
          npx playwright test --config="playwright-tests/playwright.config.ts" --grep="${{ inputs.pmm_pre_upgrade_flag }}"
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0

      - name: Execute UI pmm-server Upgrade
        working-directory: pmm-ui-tests
        run: |
          npm install
          npx playwright install
          npx playwright test --config="playwright-tests/playwright.config.ts" --grep="@pmm-upgrade"
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0

      - name: Execute pmm-client Upgrade.
        if: ${{ inputs.pmm_client_upgrade_version == '' }}
        run: |
          if [ ${{ inputs.testing_repository }} == 'yes' ];then
            sudo percona-release enable pmm2-client testing
            sudo apt-get upgrade
            sudo apt -y install pmm2-client
          elif [ ${{ inputs.experimental_repository }} == 'yes' ];then
            sudo percona-release enable pmm2-client experimental
            sudo apt-get upgrade
            sudo apt -y install pmm2-client
          fi

      - name: Execute pmm-client Upgrade to selected version
        if: ${{ inputs.pmm_client_upgrade_version != '' }}
        working-directory: pmm-qa/pmm-integration
        run: |
          sudo npx ts-node ./integration-setup.ts --ci --upgrade-pmm-client-version=${{ inputs.pmm_client_upgrade_version }}

      - name: Execute Post Upgrade UI tests
        working-directory: pmm-ui-tests
        run: |
          npm install
          npx playwright install
          npx playwright test --config="playwright-tests/playwright.config.ts" --grep="${{ inputs.pmm_post_upgrade_flag }}"
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0
