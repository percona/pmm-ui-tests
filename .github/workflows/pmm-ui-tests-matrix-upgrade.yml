name: PMM Upgrade UI Tests

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      pmm_ui_tests_branch:
        description: 'pmm-ui-tests repository branch'
        default: 'main'
        required: true
      pmm_server_start_version:
        description: 'PMM Server version to upgrade (latest|dev-latest|x.xx.x|x.xx.x-rc)'
        default: 'latest'
        required: true
      pmm_client_start_version:
        description: 'PMM Client version to upgrade from (dev-latest|pmm2-latest|pmm2-rc|x.xx.x)'
        default: 'pmm2-latest'
        required: true
      upgrade_type:
        description: 'Upgrade way:'
        required: true
        default: 'UI way'
        type: choice
        options:
          - UI way
          - Docker way
          - Side container
      pmm_qa_branch:
        description: 'pmm-qa repository branch(for setup)'
        default: 'main'
        required: true
      repository:
        description: 'Upgrade to:'
        required: true
        default: 'dev-latest'
        type: choice
        options:
          - release
          - release candidate
          - dev-latest

jobs:
  push_versions:
    name: Push repo versions
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      start_version: ${{ steps.get-start.outputs.result }}
      finish_version: ${{ steps.get-finish.outputs.result }}
    steps:
      - name: Get start version string
        id: get-start
        shell: bash
        run: |
          latest=$(wget -q https://registry.hub.docker.com/v2/repositories/percona/pmm-server/tags -O - | jq -r .results[].name  | grep -v latest | sort -V | tail -n1 | awk -F. '{print $2}')
          if [[ "${{ inputs.repository }}" != "release" ]]; then
            echo "release_latest=$latest" >> $GITHUB_ENV
          fi
          echo "result=latest" >> "$GITHUB_OUTPUT"

      - name: Get finish version string
        id: get-finish
        shell: bash
        run: |
          echo "result=2.XX.X" >> "$GITHUB_OUTPUT"

      - name: print version
        shell: bash
        run: |
          echo ${{ env.release_latest }}

  configuration:
    name: 'Configuration / Settings'
    uses: ./.github/workflows/pmm-ui-tests-upgrade.yml
    secrets: inherit
    needs: push_versions
    with:
      pmm_ui_tests_branch: ${{ inputs.pmm_ui_tests_branch }}
      pre_upgrade_tests: '@config-pre-upgrade'
      post_upgrade_tests: '@config-post-upgrade'
      pmm_server_start_version: ${{ inputs.pmm_server_start_version }}
      pmm_client_start_version: ${{ inputs.pmm_client_start_version }}
      upgrade_type: ${{ inputs.upgrade_type }}
      pmm_qa_branch: ${{ inputs.pmm_qa_branch }}
      services_list: ''
      repository: ${{ inputs.repository }}
      version_string_from: ${{needs.push_versions.outputs.start_version}}
      version_string_to: ${{needs.push_versions.outputs.finish_version}}

  rbac:
    name: RBAC
    uses: ./.github/workflows/pmm-ui-tests-upgrade.yml
    secrets: inherit
    needs: push_versions
    with:
      pmm_ui_tests_branch: ${{ inputs.pmm_ui_tests_branch }}
      pre_upgrade_tests: '@rbac-pre-upgrade'
      post_upgrade_tests: '@rbac-post-upgrade'
      pmm_server_start_version: ${{ inputs.pmm_server_start_version }}
      pmm_client_start_version: ${{ inputs.pmm_client_start_version }}
      upgrade_type: ${{ inputs.upgrade_type }}
      pmm_qa_branch: ${{ inputs.pmm_qa_branch }}
      services_list: '--addclient=ps,1 --addclient=pdpgsql,1'
      repository: ${{ inputs.repository }}
      version_string_from: ${{needs.push_versions.outputs.start_version}}
      version_string_to: ${{needs.push_versions.outputs.finish_version}}

  portal:
    name: Portal
    uses: ./.github/workflows/pmm-ui-tests-upgrade.yml
    secrets: inherit
    with:
      pmm_ui_tests_branch: ${{ inputs.pmm_ui_tests_branch }}
      pre_upgrade_tests: '@pre-pmm-portal-upgrade'
      post_upgrade_tests: '@post-pmm-portal-upgrade'
      pmm_server_start_version: ${{ inputs.pmm_server_start_version }}
      pmm_client_start_version: ${{ inputs.pmm_client_start_version }}
      upgrade_type: ${{ inputs.upgrade_type }}
      pmm_qa_branch: ${{ inputs.pmm_qa_branch }}
      services_list: ''
      repository: ${{ inputs.repository }}
